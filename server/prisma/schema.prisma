// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(uuid())
  first_name String
  last_name  String
  email      String     @unique
  user_name  String     @unique
  avatar     String     @default("https://img.freepik.com/premium-vector/account-icon-user-icon-vector-graphics_292645-552.jpg?w=740")
  cover      String     @default("https://climate.onep.go.th/wp-content/uploads/2020/01/default-image.jpg")
  phone      Int        @unique
  bithday    DateTime
  gender     TypeGender
  createAt   DateTime   @default(now())
  updateAt   DateTime   @updatedAt

  post        Post[]
  comments    Comments[] @relation("CommentUser")
  reaction    Reaction[]
  views       View[]
  // friends                Friend[]   @relation("UserFriends")
  followed_by User[]     @relation("UserFollows")
  following   User[]     @relation("UserFollows")
  // incomingFriendRequests User[]     @relation("Receiver")
  // outgoingFriendRequests User[]     @relation("Receiver")
  role        Role       @default(USER)
  auth        Auth?
  friends     Friend[]

  @@unique([user_name, email, phone])
}

model Friend {
  user_name            String             @unique
  friend_of            User               @relation(fields: [user_name], references: [user_name])
  invite_friend_status TypeStatusInvite   @default(PENDING)
  relationship         RelationshipStatus @default(FRIEND)
}

model Auth {
  id        String @id @default(uuid())
  user_name String @unique
  email     String @unique
  phone     Int    @unique
  password  String
  user      User   @relation(fields: [user_name, email, phone], references: [user_name, email, phone], onDelete: Cascade)

  @@unique([user_name, email, phone])
}

// model Friend {
//   id                     String                 @id @default(uuid())
//   user                   User                   @relation("UserFriends", fields: [user_name], references: [user_name])
//   user_name               String
//   relationshipStatus     RelationshipStatus
//   notificationPreference NotificationPreference @default(NORMAL)
// }

model Post {
  id        String     @id @default(uuid())
  content   String
  img       String[]
  user      User       @relation(fields: [user_name], references: [user_name])
  user_name String
  comment   Comments[]
  reaction  Reaction[]
  views     View[]
  createAt  DateTime   @default(now())
  updateAt  DateTime   @updatedAt
}

model Comments {
  id        String     @id @unique @default(uuid())
  content   String
  img       String?
  createAt  DateTime   @default(now())
  updateAt  DateTime   @updatedAt
  user_name String
  user      User       @relation("CommentUser", fields: [user_name], references: [user_name])
  post_id   String
  post      Post       @relation(fields: [post_id], references: [id])
  reaction  Reaction[]
  children  Comments[] @relation("Comment_Children")
  parent    Comments?  @relation("Comment_Children", fields: [parent_id], references: [id])
  parent_id String?
}

model Reaction {
  id         String       @id @default(uuid())
  type       TypeReaction
  user_name  String
  user       User         @relation(fields: [user_name], references: [user_name])
  comment_id String
  comment    Comments     @relation(fields: [comment_id], references: [id])
  post_id    String
  post       Post         @relation(fields: [post_id], references: [id])
  // storyId   String
  // story     Stories      @relation(fields: [storyId], references: [id])
}

model View {
  id       String   @id @default(uuid())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  user      User?   @relation(fields: [user_name], references: [user_name])
  user_name String?
  post      Post    @relation(fields: [post_id], references: [id])
  post_id   String
}

enum RelationshipStatus {
  FAMILY
  FRIEND
  ACQUAINTANCE
}

enum NotificationPreference {
  MUTED_UNTIL_TOMORROW
  MUTED_FOREVER
  NORMAL
}

enum TypeStatusInvite {
  PENDING
  ACCEPT
  REJECT
}

enum TypeReaction {
  LIKE
  HAHA
  LOVE
  CRY
}

enum Role {
  ADMIN
  USER
  MANAGER
}

enum TypeAuth {
  JWT
  EMAIl
}

enum TypeGender {
  MALE
  FEMALE
  OTHERS
}

// model Stories {
//   id       String     @id @default(uuid())
//   content  String
//   user_name   Int
//   user     User      @relation(fields: [user_name], references: [id])
//   comment  Comments[]
//   reaction Reaction[]
//   img      String
// }
